import dash
from dash import html, dcc, Input, Output, callback, State
from datetime import datetime

import firebase_functions as fb

dash.register_page(__name__, path_template='/agent/<id>', name=None)


def layout(id=None):
    # This initial data load is now mostly a placeholder,
    # as the content is generated by the callback.
    return html.Div([
        html.Link(rel='stylesheet', href='/static/css/detailsVehicles.css'),
        html.Link(rel='stylesheet', href='/static/css/modal.css'),

        dcc.Store(id='agent-store', data={'id': id, 'trigger': 0}),

        # Removal Confirmation Modal
        html.Div(id='removal-modal-agent', className='modal', style={'display': 'none'}, children=[
            html.Div(className='modal-content', children=[
                html.Div(className='modal-header', children=[
                    html.H5('Confirmar Remoção'),
                    html.Button('×', id='close-modal-agent', className='modal-close-button')
                ]),
                html.Div(className='modal-body', children=[
                    html.P("Você tem certeza que deseja remover a atribuição deste agente?")
                ]),
                html.Div(className='modal-footer', children=[
                    html.Button('Cancelar', id='cancel-remove-agent', className='btn btn-secondary'),
                    html.Button('Confirmar', id='confirm-remove-agent', className='btn btn-danger')
                ])
            ])
        ]),

        # The main content will be loaded here by a callback
        html.Div(id='agent-details-content'),

    ], className='page-content')


@callback(
    Output('agent-details-content', 'children'),
    Input('agent-store', 'data')
)
def update_agent_details(store_data):
    agent_id = store_data['id']
    agent_data = fb.get_agent_by_id(agent_id)

    if not agent_data:
        return html.H3("Agente não encontrado")

    vehicle_number = agent_data.get('viatura')
    vehicle_data = fb.get_vehicle_by_number(vehicle_number) if vehicle_number else None
    team_agents = fb.get_agents_by_vehicle(vehicle_number) if vehicle_number else []

    motorista = next((a for a in team_agents if a.get('funcao', '').lower() == 'motorista'), None)
    another_agents = [a for a in team_agents if a != motorista]

    history = fb.get_occurrences_and_services_by_vehicle(vehicle_number) if vehicle_number else []
    meses_unicos = sorted(list(set(datetime.strptime(h['data'], "%Y-%m-%d").strftime("%Y/%m") for h in history)))
    dropdown_options = [{'label': 'Todos os meses', 'value': 'todos'}] + [
        {'label': datetime.strptime(m, "%Y/%m").strftime("%B/%Y").capitalize(), 'value': m} for m in meses_unicos
    ]

    return [
        html.Div([
            html.H3(f"Agente - {agent_data.get('nome', 'N/A')}", className='tittle'),
            html.Div([
                html.Img(src=agent_data.get('foto_agnt', '/static/assets/img/persona.png'), className='img_agent'),
                html.Div([
                    html.P(f"Cargo: {agent_data.get('cargo', 'N/A')}", className='det carg'),
                    html.P(f"Função: {agent_data.get('funcao', 'Sem função')}", className='det func'),
                    dcc.Link(
                        html.P(f"Viatura: {agent_data.get('viatura', 'N/A')}"),
                        href=f"/dashboard/veiculo/{vehicle_data['numero']}" if vehicle_data else '#',
                        className='link-ag-vt'
                    )
                ], className='texts-det'),
            ], className='details-items'),
            html.Div([
                html.Div([
                    html.A(id='rem_agent', children='Remover Atribuição', className='btn rem_vehicle')
                ], className='btn_rem'),
            ], className='btn_rem_add'),
        ], className='details-container card'),

        html.Div([
            html.H4("Histórico do Agente na Viatura"),
            dcc.Dropdown(
                id='filter-month-agent',
                options=dropdown_options,
                value='todos',
                placeholder="Filtrar por mês...",
                className='filter-month'
            ),
            html.Div(id='table-ocurrences-agents'),
        ], className='ocurrences card'),

        html.Div([
            html.H3(f"Equipe da Viatura"),
            html.Div([
                dcc.Link(
                    html.Div([
                        html.Img(src=motorista.get('foto_agnt', '/static/img/default-user.png'), className='img'),
                        html.P(motorista['nome'], className='agent-name'),
                    ], className='agent-box motorista'),
                    href=f"/dashboard/agent/{motorista['id']}", className='link-ag-vt'
                ) if motorista else html.Div("Sem motorista designado", className='agent-box'),

                *[dcc.Link(
                    html.Div([
                        html.Img(src=agente.get('foto_agnt', '/static/img/default-user.png'), className='img'),
                        html.P(agente.get('nome', 'N/A'), className='agent-name'),
                    ], className='agent-box'),
                    href=f"/dashboard/agent/{agente['id']}", className='link-ag-vt'
                ) for agente in another_agents]
            ], className='agents-grid'),
        ], className='agents-container card'),
    ]


@callback(
    Output('table-ocurrences-agents', 'children'),
    [Input('filter-month-agent', 'value'),
     Input('agent-store', 'data')]
)
def update_history_table(selected_month, store_data):
    agent_id = store_data.get('id')
    agent_data = fb.get_agent_by_id(agent_id)
    if not agent_data or not agent_data.get('viatura'):
        return html.P("Agente não está em nenhuma viatura.")

    history = fb.get_occurrences_and_services_by_vehicle(agent_data['viatura'])

    if selected_month != 'todos':
        history = [h for h in history if datetime.strptime(h['data'], '%Y-%m-%d').strftime('%Y/%m') == selected_month]

    if not history:
        return html.P("Nenhum registro encontrado para este período.")

    table_header = [html.Thead(html.Tr([html.Th("Data"), html.Th("Tipo"), html.Th("Descrição")]))]
    table_body = [html.Tbody([
        html.Tr([
            html.Td(item['data']),
            html.Td(item['tipo']),
            html.Td(item['nomenclatura']),
            html.Td(dcc.Link('Ver Mais', href=f"/dashboard/{item['path']}/{item['id']}", className="btn_view"))
        ]) for item in history
    ])]
    return html.Table(table_header + table_body, className='table-ocurrences')


@callback(
    Output('removal-modal-agent', 'style'),
    [Input('rem_agent', 'n_clicks'),
     Input('close-modal-agent', 'n_clicks'),
     Input('cancel-remove-agent', 'n_clicks')],
    prevent_initial_call=True
)
def toggle_removal_modal(n_open, n_close, n_cancel):
    ctx = dash.callback_context
    if not ctx.triggered:
        return {'display': 'none'}

    trigger_id = ctx.triggered[0]['prop_id'].split('.')[0]
    if trigger_id == 'rem_agent':
        return {'display': 'block'}

    return {'display': 'none'}


@callback(
    [Output('agent-store', 'data', allow_duplicate=True),
     Output('removal-modal-agent', 'style', allow_duplicate=True)],
    Input('confirm-remove-agent', 'n_clicks'),
    State('agent-store', 'data'),
    prevent_initial_call=True
)
def handle_remove_agent(n_clicks, store_data):
    if n_clicks:
        agent_id = store_data['id']
        fb.clear_agent_assignment(agent_id)
        # Increment trigger to force a refresh of the agent-details-content
        new_store_data = store_data.copy()
        new_store_data['trigger'] += 1
        return new_store_data, {'display': 'none'}
    return dash.no_update, dash.no_update