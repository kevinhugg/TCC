import dash
from dash import html, dcc, Input, Output, callback, State, ctx
from datetime import datetime
import time

import firebase_functions as fb

dash.register_page(__name__, path_template='/agent/<id>', name=None)


def layout(id=None):
    # This initial data load is now mostly a placeholder,
    # as the content is generated by the callback.
    return html.Div([
        html.Link(rel='stylesheet', href='https://use.fontawesome.com/releases/v5.8.1/css/all.css'),
        html.Link(rel='stylesheet', href='/static/css/detailsVehicles.css'),
        html.Link(rel='stylesheet', href='/static/css/modal.css'),
        dcc.ConfirmDialog(id='update-confirm-agent', message=''),

        dcc.Store(id='agent-store', data={'id': id, 'trigger': 0}),

        # Removal Confirmation Modal
        html.Div(id='removal-modal-agent', className='modal', style={'display': 'none'}, children=[
            html.Div(className='modal-content', children=[
                html.Div(className='modal-header', children=[
                    html.H5('Confirmar Remoção'),
                    html.Button('×', id='close-modal-agent', className='modal-close-button')
                ]),
                html.Div(className='modal-body', children=[
                    html.P("Você tem certeza que deseja remover a atribuição deste agente?")
                ]),
                html.Div(className='modal-footer', children=[
                    html.Button('Cancelar', id='cancel-remove-agent', className='btn btn-secondary'),
                    html.Button('Confirmar', id='confirm-remove-agent', className='btn btn-danger')
                ])
            ])
        ]),

        # The main content will be loaded here by a callback
        html.Div(id='agent-details-content', className='agent-details-wrapper'),

        # Modal para fazer upload de uma nova imagem para o agente
        html.Div(
            id='modal-upload-agent-image',
            className='modal',
            style={'display': 'none'},  # Inicia escondido
            children=[
                html.Div(
                    className='modal-content',
                    children=[
                        html.Div(className='modal-header', children=[
                            html.H5('Alterar Imagem do Agente', className='modal-title'),
                            html.Button('×', id='cancel-upload-agent-x', className='modal-close-button')
                        ]),
                        html.Div(className='modal-body', children=[
                            html.Div(
                                id='upload-container-agent',
                                style={'position': 'relative', 'padding': '10px'},
                                children=[
                                    dcc.Upload(
                                        id='upload-new-agent-image',
                                        children=html.Div(['Arraste ou ', html.A('Selecione uma Imagem')]),
                                        style={
                                            'width': '100%', 'height': '100px', 'lineHeight': '100px',
                                            'borderWidth': '2px', 'borderStyle': 'dashed',
                                            'borderRadius': '5px', 'textAlign': 'center',
                                        },
                                        accept='image/*'
                                    ),
                                    html.Div(id='image-preview-container-agent', style={'display': 'none'}, children=[
                                        html.Img(id='image-preview-agent',
                                                 style={'width': '200px', 'height': '120px', 'objectFit': 'cover'}),
                                        html.Button('×', id='remove-image-button-agent', className='remove-image-btn')
                                    ])
                                ]
                            ),
                            html.Div(id='output-image-upload-agent',
                                     style={'textAlign': 'center', 'marginTop': '10px'}),
                        ]),
                        html.Div(className='modal-footer', children=[
                            html.Button('Cancelar', id='cancel-upload-button-agent', className='modal-button cancel'),
                            html.Button('Salvar Nova Imagem', id='submit-new-agent-image', n_clicks=0,
                                        className='modal-button submit'),
                        ])
                    ]
                )
            ]
        ),

    ], className='page-content')


@callback(
    Output('agent-details-content', 'children'),
    Input('agent-store', 'data')
)
def update_agent_details(store_data):
    agent_id = store_data['id']
    agent_data = fb.get_agent_by_doc_id(agent_id)

    if not agent_data:
        return html.H3("Agente não encontrado")

    vehicle_number = agent_data.get('viatura')
    vehicle_data = fb.get_vehicle_by_number(vehicle_number) if vehicle_number else None
    team_agents = fb.get_agents_by_vehicle(vehicle_number) if vehicle_number else []

    motorista = next((a for a in team_agents if a.get('funcao', '').lower() == 'motorista'), None)
    another_agents = [a for a in team_agents if a != motorista]

    history = fb.get_history_by_agent(agent_id)
    meses_unicos = sorted(list(set(datetime.strptime(h['data'], "%Y-%m-%d").strftime("%Y/%m") for h in history)))
    dropdown_options = [{'label': 'Todos os meses', 'value': 'todos'}] + [
        {'label': datetime.strptime(m, "%Y/%m").strftime("%B/%Y").capitalize(), 'value': m} for m in meses_unicos
    ]

    return html.Div([
        # Coluna 1: Detalhes do Agente
        html.Div([
            html.H3(f"Agente - {agent_data.get('nome', 'N/A')}", className='tittle'),
            html.Div([
                html.Div(
                    id='agent-image-container',
                    className='agent-image-container',
                    n_clicks=0,
                    children=[
                        html.Img(
                            id='agent-image-clickable',
                            src=agent_data.get('foto_agnt', '/static/assets/img/persona.png'),
                            className='img',
                            title='Clique para alterar a imagem'
                        ),
                        html.Div(className='image-overlay', children=[
                            html.I(className='fas fa-camera'),
                            html.Span('Mudar foto')
                        ])
                    ]
                ),
                html.Div([
                    html.P(f"Cargo: {agent_data.get('cargo_at', 'N/A')}", className='det carg'),
                    html.P(f"Função: {agent_data.get('funcao', 'Sem função')}", className='det func'),
                    dcc.Link(
                        html.P(f"Viatura: {agent_data.get('viatura', 'N/A')}"),
                        href=f"/dashboard/veiculo/{vehicle_data['numero']}" if vehicle_data else '#',
                        className='link-ag-vt'
                    )
                ], className='texts-det'),
            ], className='details-items'),
            html.Div([
                html.Div([
                    html.A(id='rem_agent', children='Remover Atribuição', className='btn rem_vehicle')
                ], className='btn_rem'),
            ], className='btn_rem_add'),
        ], className='details-container card'),

        # Coluna 2: Histórico do Agente
        html.Div([
            html.H4("Histórico do Agente na Viatura"),
            dcc.Dropdown(
                id='filter-month-agent',
                options=dropdown_options,
                value='todos',
                placeholder="Filtrar por mês...",
                className='filter-month'
            ),
            html.Div(id='table-ocurrences-agents'),
        ], className='ocurrences card'),

        # Coluna 3: Equipe da Viatura
        html.Div([
            html.H3(f"Equipe da Viatura"),
            html.Div([
                dcc.Link(
                    html.Div([
                        html.Img(src=motorista.get('foto_agnt', '/static/img/default-user.png'), className='img'),
                        html.P(motorista['nome'], className='agent-name'),
                    ], className='agent-box motorista'),
                    href=f"/dashboard/agent/{motorista['id']}", className='link-ag-vt'
                ) if motorista else html.Div("Sem motorista designado", className='agent-box'),

                *[dcc.Link(
                    html.Div([
                        html.Img(src=agente.get('foto_agnt', '/static/img/default-user.png'), className='img'),
                        html.P(agente.get('nome', 'N/A'), className='agent-name'),
                    ], className='agent-box'),
                    href=f"/dashboard/agent/{agente['id']}", className='link-ag-vt'
                ) for agente in another_agents]
            ], className='agents-grid'),
        ], className='agents-container card'),
    ], className='agent-details-wrapper')


@callback(
    Output('table-ocurrences-agents', 'children'),
    [Input('filter-month-agent', 'value'),
     Input('agent-store', 'data')]
)
def update_history_table(selected_month, store_data):
    agent_id = store_data.get('id')
    if not agent_id:
        return html.P("ID do agente não encontrado.")

    history = fb.get_history_by_agent(agent_id)

    if selected_month != 'todos':
        history = [h for h in history if datetime.strptime(h['data'], '%Y-%m-%d').strftime('%Y/%m') == selected_month]

    if not history:
        return html.P("Nenhum registro encontrado para este período.")

    table_header = [html.Thead(html.Tr([
        html.Th("Data"),
        html.Th("Tipo"),
        html.Th("Descrição"),
        html.Th("Viatura")
    ]))]
    table_body = [html.Tbody([
        html.Tr([
            html.Td(item['data']),
            html.Td(item['tipo']),
            html.Td(item['descricao']),
            html.Td(item.get('viatura', 'N/A')),
            html.Td(dcc.Link('Ver Mais', href=f"/dashboard/{item['path']}/{item['id']}", className="btn_view"))
        ]) for item in history
    ])]
    return html.Table(table_header + table_body, className='table-ocurrences')


@callback(
    Output('removal-modal-agent', 'style'),
    [Input('rem_agent', 'n_clicks'),
     Input('close-modal-agent', 'n_clicks'),
     Input('cancel-remove-agent', 'n_clicks')],
    [State('removal-modal-agent', 'style')],
    prevent_initial_call=True
)
def toggle_removal_modal(n_open, n_close, n_cancel, current_style):
    ctx = dash.callback_context
    if not ctx.triggered:
        return dash.no_update

    trigger_id = ctx.triggered[0]['prop_id'].split('.')[0]

    if trigger_id == 'rem_agent' and n_open:
        return {'display': 'block'}

    if trigger_id in ['close-modal-agent', 'cancel-remove-agent']:
        return {'display': 'none'}

    return dash.no_update


@callback(
    [Output('agent-store', 'data', allow_duplicate=True),
     Output('removal-modal-agent', 'style', allow_duplicate=True)],
    Input('confirm-remove-agent', 'n_clicks'),
    State('agent-store', 'data'),
    prevent_initial_call=True
)
def handle_remove_agent(n_clicks, store_data):
    if n_clicks:
        agent_id = store_data['id']
        fb.clear_agent_assignment(agent_id)
        # Increment trigger to force a refresh of the agent-details-content
        new_store_data = store_data.copy()
        new_store_data['trigger'] += 1
        return new_store_data, {'display': 'none'}
    return dash.no_update, dash.no_update


@callback(
    Output('modal-upload-agent-image', 'style'),
    [Input('agent-image-container', 'n_clicks'),
     Input('cancel-upload-button-agent', 'n_clicks'),
     Input('cancel-upload-agent-x', 'n_clicks')],
    prevent_initial_call=True
)
def toggle_upload_modal_agent(n_open, n_cancel, n_cancel_x):
    ctx = dash.callback_context
    if not ctx.triggered:
        return dash.no_update

    triggered_id = ctx.triggered[0]['prop_id'].split('.')[0]

    # Só abre se o n_clicks for maior que 0
    if triggered_id == 'agent-image-container' and n_open and n_open > 0:
        return {'display': 'flex'}

    if triggered_id in ['cancel-upload-button-agent', 'cancel-upload-agent-x']:
        return {'display': 'none'}

    return dash.no_update

@callback(
    Output('update-confirm-agent', 'displayed'),
    Output('update-confirm-agent', 'message'),
    Output('modal-upload-agent-image', 'style', allow_duplicate=True),
    Input('submit-new-agent-image', 'n_clicks'),
    State('upload-new-agent-image', 'contents'),
    State('upload-new-agent-image', 'filename'),
    State('agent-store', 'data'),
    prevent_initial_call=True
)
def update_agent_image(n_clicks, contents, filename, store_data):
    hide_modal_style = {'display': 'none'}
    agent_id = store_data.get('id')

    if not contents:
        return True, "Por favor, selecione uma imagem para fazer o upload.", dash.no_update

    if not agent_id:
        return True, "ID do agente não encontrado. Não é possível salvar a imagem.", hide_modal_style

    new_image_url = fb.replace_agent_image(agent_id, contents, filename)

    if new_image_url:
        return True, "Imagem do agente atualizada com sucesso!", hide_modal_style
    else:
        return True, "Falha ao atualizar a imagem do agente.", hide_modal_style


@callback(
    Output('agent-store', 'data', allow_duplicate=True),
    Input('update-confirm-agent', 'submit_n_clicks'),
    State('agent-store', 'data'),
    prevent_initial_call=True
)
def refresh_agent_data_after_update(submit_n_clicks, store_data):
    if not submit_n_clicks:
        return dash.no_update

    # Increment trigger to force a refresh of the agent-details-content
    new_store_data = store_data.copy()
    new_store_data['trigger'] += 1
    return new_store_data